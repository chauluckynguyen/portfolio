"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var EyeglassModules_1 = require("./modules/EyeglassModules");
var ModuleFunctions_1 = require("./modules/ModuleFunctions");
var ModuleImporter_1 = require("./importers/ModuleImporter");
var AssetImporter_1 = require("./importers/AssetImporter");
var FSImporter_1 = require("./importers/FSImporter");
var Options_1 = require("./util/Options");
var Assets_1 = require("./assets/Assets");
var deprecator_1 = require("./util/deprecator");
var semverChecker_1 = require("./util/semverChecker");
var fs = require("fs-extra");
var SassImplementation_1 = require("./util/SassImplementation");
var heimdall = require("heimdalljs");
var SimpleCache_1 = require("./util/SimpleCache");
var perf_1 = require("./util/perf");
var debugGenerator = require("debug");
var debug = debugGenerator("eyeglass:initialization");
// eslint-disable-next-line @typescript-eslint/no-var-requires
var pkg = require("../package.json");
function resetGlobalCaches() {
    EyeglassModules_1.resetGlobalCaches();
    perf_1.resetGlobalCaches();
}
exports.resetGlobalCaches = resetGlobalCaches;
var node_version_deprecation_warning_processed = false;
var Eyeglass = /** @class */ (function () {
    function Eyeglass(options, deprecatedNodeSassArg) {
        var e_1, _a;
        var timer = heimdall.start("eyeglass:instantiation");
        this.onceCache = new SimpleCache_1.SimpleCache();
        try {
            // an interface for deprecation warnings
            this.deprecate = deprecator_1.default(options);
            this.options = new Options_1.default(options, this.deprecate, deprecatedNodeSassArg);
            this.assets = new Assets_1.default(this, this.options.eyeglass.engines.sass);
            this.modules = new EyeglassModules_1.default(this.options.eyeglass.root, this.options, this.options.eyeglass.modules);
            if (!node_version_deprecation_warning_processed) {
                if (process.version.startsWith("v6") || process.version.startsWith("v11")) {
                    this.deprecate("2.4.2", "3.0.0", "Support for node v6 and node v11.");
                }
                node_version_deprecation_warning_processed = true;
            }
            fs.mkdirpSync(this.options.eyeglass.cacheDir);
            semverChecker_1.default(this, this.options.eyeglass.engines.sass, this.options.eyeglass, Eyeglass.VERSION);
            checkMissingDependencies.call(this);
            checkDependencyConflicts.call(this);
            // initialize all the modules
            this.modules.init(this, this.options.eyeglass.engines.sass);
            // add importers and functions
            addImporters.call(this);
            addFunctions.call(this);
            // deprecated stuff
            deprecateProperties.call(this, ["enableImportOnce"]);
            // auto-add asset paths specified via options
            if (this.options.eyeglass.assets.sources) {
                try {
                    for (var _b = __values(this.options.eyeglass.assets.sources), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var assetSource = _c.value;
                        this.assets.addSource(assetSource.directory, assetSource);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        catch (e) {
            // typescript needs this catch & throw to convince it that the instance properties are initialized.
            throw e;
        }
        finally {
            timer.stop();
        }
    }
    // export deprecated interfaces for back-compat
    Eyeglass.prototype.sassOptions = function () {
        this.deprecate("0.8.0", "0.9.0", "#sassOptions() is deprecated. Instead, you should access the sass options on #options");
        return this.options;
    };
    Eyeglass.helpers = function (sass) {
        return SassImplementation_1.helpers(sass);
    };
    // eslint-disable-next-line no-dupe-class-members
    Eyeglass.prototype.once = function (key, firstTime, otherwise) {
        if (this.onceCache.has(key)) {
            if (otherwise) {
                return otherwise();
            }
            else {
                return;
            }
        }
        else {
            this.onceCache.set(key, true);
            return firstTime();
        }
    };
    Eyeglass.VERSION = pkg.version;
    return Eyeglass;
}());
exports.default = Eyeglass;
var VERSION_WARNINGS_ISSUED = {};
function checkDependencyConflicts() {
    var e_2, _a;
    var conflicts = this.modules.issues.dependencies.versions;
    var strictMode = this.options.eyeglass.strictModuleVersions;
    var deprecatedWarn = false;
    if (typeof strictMode === "undefined") {
        strictMode = "warn";
    }
    // XXX Remove prior to next major release.
    if (strictMode === true) {
        strictMode = "warn";
        deprecatedWarn = true;
    }
    try {
        for (var conflicts_1 = __values(conflicts), conflicts_1_1 = conflicts_1.next(); !conflicts_1_1.done; conflicts_1_1 = conflicts_1.next()) {
            var conflict = conflicts_1_1.value;
            var message = "Version conflict for eyeglass module '" + conflict.name + "': " + conflict.requested.version + " was requested but it was globally resolved to " + conflict.resolved.version + ".";
            if (strictMode === false) {
                debug(message);
            }
            else if (strictMode === "warn") {
                if (!VERSION_WARNINGS_ISSUED[message]) {
                    console.error("WARNING: " + message);
                    if (deprecatedWarn) {
                        console.error("WARNING: Because strictModuleVersions is true, the previous warning will become an error in the next major release. Consider setting strictModuleVersions to 'warn' for now.");
                    }
                    VERSION_WARNINGS_ISSUED[message] = true;
                }
            }
            else if (strictMode === true) {
                throw new Error(message);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (conflicts_1_1 && !conflicts_1_1.done && (_a = conflicts_1.return)) _a.call(conflicts_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function checkMissingDependencies() {
    var missing = this.modules.issues.dependencies.missing;
    if (missing.length) {
        var warning = ["The following dependencies were not found:"];
        warning.push.apply(warning, missing.map(function (dep) {
            return "  " + dep;
        }));
        warning.push("You might need to `npm install` the above.");
        // eslint-disable-next-line no-console
        console.warn(warning.join("\n"));
    }
}
function addImporters() {
    var fsImporter = FSImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, this.options.importer);
    var assetImporter = AssetImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, fsImporter);
    this.options.importer = ModuleImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, assetImporter);
}
function addFunctions() {
    this.options.functions = ModuleFunctions_1.default(this, this.options.eyeglass.engines.sass, this.options, this.options.functions // The type of @types/node-sass/Options["functions"] is bad.
    );
}
function deprecateProperties(properties) {
    var e_3, _a;
    var _loop_1 = function (prop) {
        Object.defineProperty(this_1, prop, {
            get: function () {
                this.deprecate("0.8.0", "0.9.0", "The property `" + prop + "` should no longer be accessed directly on eyeglass. " +
                    "Instead, you'll find the value on `eyeglass.options.eyeglass." + prop + "`");
                return this.options.eyeglass[prop];
            },
            set: function (value) {
                this.deprecate("0.8.0", "0.9.0", "The property `" + prop + "` should no longer be set directly on eyeglass. " +
                    "Instead, you should pass this as an option to eyeglass:" +
                    "\n  var options = eyeglass({" +
                    "\n    /* sassOptions */" +
                    "\n    ..." +
                    "\n    eyeglass: {" +
                    "\n      " + prop + ": ..." +
                    "\n    }" +
                    "\n  });");
                var eyeglassOpts = this.options.eyeglass;
                eyeglassOpts[prop] = value;
            }
        });
    };
    var this_1 = this;
    try {
        for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
            var prop = properties_1_1.value;
            _loop_1(prop);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
//# sourceMappingURL=Eyeglass.js.map
///
/// Outputs the `has` modifier.
/// @name has
/// @group builder
/// @param {string} $modifier [null] - Input a modifier name.
/// @example scss
///   @include has("form") {
///   }
///
///   // output
///   .has-form
/// @require {function} get-setup
/// @require {mixin} toggle
/// @require {variable} $_namespace-mod
///

@mixin has($modifier: null) {
	// toggle
	@include toggle(("has": true));

	// create mod selector
	$mod-selector: map-get($_namespace-mod, "has") + "-" + $modifier;

	// output
	@if not get-setup("child") {
		@if get-setup("host") {
			@at-root :host(#{get-setup("host-selector") + $mod-selector}) { @content; }
		} @else {
			&#{$mod-selector} { @content; }
		}
	}

	// toggle
	@include toggle(("has": false));
}

///
/// Outputs the `is` modifier.
/// @name is
/// @group builder
/// @param {string} $modifier [null] - Input a modifier name.
/// @param {list} $option [""] - If the pseudo selector has an option.
/// @example scss
///   @include is("focus") {
///   }
///
///   // output
///   :focus,
///   .is-focus
/// @require {function} get-setup
/// @require {mixin} toggle
/// @require {variable} $_namespace-mod
/// @require {variable} $_pseudo-selector
/// @require {variable} $_pseudo-selector-option
///

@mixin is($modifiers: null, $option: "") {
	// toggle
	@include toggle(("is": true));

	// output
	@each $modifier in $modifiers {
		// create mod selector
		$mod-selector: map-get($_namespace-mod, "is") + "-" + $modifier;

		@if map-has-key($_pseudo-selector, $modifier) {
			@if get-setup("host") and not get-setup("child") and not get-setup("nested") {
				@at-root :host(#{get-setup("host-selector") + ":" + $modifier}) { @content; }
				@at-root :host(#{get-setup("host-selector") + $mod-selector}) { @content; }
			} @else {
				&:#{$modifier},
				&#{$mod-selector} { @content; }
			}
		}

		@if map-has-key($_pseudo-selector-option, $modifier) {
			// create mod selector
			$mod-selector: map-get($_namespace-mod, "is") + "-" + $modifier + "-" + $option;

			@if get-setup("host") and not get-setup("child") and not get-setup("nested") {
				@at-root :host(#{get-setup("host-selector") + ":" + $modifier + "(" + $option + ")"}) { @content; }
				@at-root :host(#{get-setup("host-selector") + $mod-selector}) { @content; }
			} @else {
				&:#{$modifier}(#{$option}),
				&#{$mod-selector} { @content; }
			}
		}

		@if not map-has-key($_pseudo-selector, $modifier) and not map-has-key($_pseudo-selector-option, $modifier) {
			// create mod selector
			$mod-selector: map-get($_namespace-mod, "is") + "-" + $modifier;

			@if get-setup("host") {
				@at-root :host(#{get-setup("host-selector") + $mod-selector}) { @content; }
			} @else {
				&#{$mod-selector} { @content; }
			}
		}

		// toggle
		@include toggle(("is": false));
	}
}

///
/// Outputs the `mod` modifier with a verbose option.
/// @name mod
/// @group builder
/// @param {string} $modifier [null] - Input a modifier name.
/// @param {list} $option [null] - Options for a verbose modifier.
/// @example scss
///   @include component("alert") {
///     @include mod("highlight") {
///     }
///
///     @include mod("highlight", "verbose" true) {
///     }
///   }
///
///   // output
///   .sample-alert.-highlight
///   .sample-alert.sample-alert_highlight
/// @require {function} get-setup
/// @require {mixin} toggle
/// @require {variable} $_mods
/// @require {variable} $_namespace-mod
///

@mixin mod($modifier: null, $options: null) {
	// toggle
	@include toggle((
		"mod": true));

	// toggle
	@if not get-setup("child") {
		@include toggle((
			"default-selector-stored": get-setup("default-selector"),
			"host-selector-stored": get-setup("host-selector")));
	}

	// get mods for the component
	$component-mods: ();
	@if map-get($_mods, get-setup("current-component")) {
		$component-mods: map-get($_mods, get-setup("current-component"));
	}

	// update options
	$mod-options: ("mod": map-get($_namespace-mod, "mod"), "verbose": get-setup("verbose-mod"));
	$options: update($mod-options, $options);

	// create mod selector
	$mod-selector: map-get($options, "mod") + "-" + $modifier;
	$verbose-selector: get-setup("modifier-prefix") + $modifier;

	// output
	@if map-get($_mods, "all") or map-get($component-mods, "all") or map-get($component-mods, $modifier) {
		@if get-setup("host") and not get-setup("child") {
			$host-selector-reset: get-setup("host-selector");

			@if map-get($options, "verbose") {
				@include toggle(("host-selector": get-setup("host-selector") + get-setup("default-selector") + $verbose-selector));
				@at-root :host(#{get-setup("host-selector")}) { @content; }
				@include toggle(("host-selector": $host-selector-reset));
			}

			@include toggle(("host-selector": get-setup("host-selector") + $mod-selector));
			@at-root :host(#{get-setup("host-selector")}) { @content; }
			@include toggle(("host-selector": $host-selector-reset));
		} @else {
			@if map-get($options, "verbose") {
				$default-selector-reset: get-setup("default-selector");
				@include toggle(("default-selector": get-setup("default-selector") + $verbose-selector));
				&#{get-setup("default-selector")} { @content; }
				@include toggle(("default-selector": $default-selector-reset));
			}

			&#{$mod-selector} { @content; }
		}
	}

	// toggle
	@if not get-setup("child") {
		@include toggle((
			"default-selector": get-setup("default-selector-stored"),
			"host-selector-stored": get-setup("host-selector")));
	}

	// toggle
	@include toggle((
		"mod": false));
}

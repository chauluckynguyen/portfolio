///
/// Outputs correct nested elements when using inside of a host mixin.
/// @name nested
/// @group builder
/// @param {map} $selectors [()] - Input a list of selectors.
/// @example scss
///   @include component("popover") {
///     @include nested("button") {
///     }
///   }
///
///   // output
///   .sample-popover .sample-button
/// @require {function} get-setup
/// @require {mixin} toggle
///

@mixin nested($selectors: ()) {
	// toggle
	@include toggle(("nested": true));

	// create nested selector
	$nested-selector: "";
	@each $selector in $selectors {
		$i: index($selectors, $selector);

		@if $i <= 1 {
			$nested-selector: $nested-selector + has-selector(nth($selectors, $i));
		} @else {
			$nested-selector: $nested-selector + get-setup("child-prefix") + nth($selectors, $i);
		}
	};

	// output
	#{$nested-selector} { @content; }

	// toggle
	@include toggle(("nested": false));
}

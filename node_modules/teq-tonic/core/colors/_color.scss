///
/// Color function that calls to the `$_palette-default` map by default.
/// @name color
/// @group color
/// @param {list} $values [null] - Choose a color from a color palette or enter test case for WCAG.
/// @param {number} $opacity [1] - Change the opacity of the color.
/// @param {map} $palette [$_palette-default] - Change which palette the color call is to.
/// @param {boolean} $css-variable [true] - Choose if it's a css variable or rgba value.
/// @example scss
///   background: color("green-50");
///   color: color("gray-600", 0.8);
///
///   // output
///   background: rgba(var(--color-green-50), 1);
///   color: rgba(var(--color-gray-600), 0.8);
/// @require {function} wcag
/// @require {variable} $_palette-default
///

@function color($values: null, $opacity: 1, $palette: $_palette-default, $css-variable: get-setup("cssvars")) {
	@if not $values {
		@warn "No colors entered. Property omitted.";
		@return null;
	}

	// WCAG contrast check
	@if length($values) > 1 and get-setup("debug") {
		@warn wcag($values, $palette);
	}

	@if map-has-key($palette, nth($values, 1)) and $css-variable {
		// If in the palette and a css variable
		@return #{rgba(unquote("var(--color-" + nth($values, 1) + ")"), $opacity)};
	} @else if map-has-key($palette, nth($values, 1)) {
		// If in the palette and not a css variable
		@return #{rgba(map-get($palette, nth($values, 1)), $opacity)};
	} @else if type-of(nth($values, 1)) == "color" {
		// If just a regular color
		@return #{rgba(nth($values, 1), $opacity)};
	} @else {
		// If it's not in the palette or a color
		@warn "No color name found in $_palette-default for '#{nth($values, 1)}' and it is not a color. Property omitted.";
		@return null;
	}
}

///
/// Shadow function that calls to the `$_palette-default` map by default.
///
/// _This is a Safari `box-shadow` fix. Safari currently does not support css variables being used for the `box-shadow` property._
/// @name shadow
/// @group color
/// @param {string} $color [null] - Choose a color from a color palette.
/// @param {number} $opacity [1] - Change the opacity of the color.
/// @param {map} $palette [$_palette-default] - Change which palette the color call is to.
/// @example scss
///   box-shadow: shadow("charcoal-500") 0.1rem 0.1rem 0.5rem;
///
///   // output
///   box-shadow: rgba(41, 62, 64, 1) 0.1rem 0.1rem 0.5rem;
/// @require {variable} $_palette-default
///

@function shadow($color: null, $opacity: 1, $palette: $_palette-default) {
	@if not $color {
		@warn "No color entered. Property omitted.";
		@return null;
	} @else if not map-has-key($palette, $color) {
		@warn "No color found for '#{$color}'. Property omitted.";
		@return null;
	}

	@return #{rgba(map-get($_palette-default, $color), $opacity)}
}

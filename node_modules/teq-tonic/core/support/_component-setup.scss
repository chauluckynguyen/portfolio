///
/// Sets up the base variables for a new component.
/// @name component-setup
/// @group support
/// @access private
/// @param {string} $component [""] - The component name.
/// @param {map} $options [()] - Any options that need to be applied.
/// @example scss
///   @include component-setup("alert", ("host": true));
/// @require {function} class
/// @require {mixin} define-modifiers
/// @require {variable} $_mods
/// @require {variable} $_setup
///

@mixin component-setup($component: "", $options: ()) {
	// reset defaults
	$defaults-reset: (
		"current-component": "",
		"default-selector": "",
		"default-selector-stored": "",
		"host-element": "",
		"host-selector": "",
		"host-selector-stored": "",
		"host": map-get($options, "host")
	);

	// reset map
	$_setup: map-merge($_setup, $defaults-reset) !global;

	// custom host element
	$host-element: $component;
	@if map-get($options, "host-element") {
		$host-element: map-get($options, "host-element");
	}

	// update defaults
	$defaults-updated: (
		"current-component": $component,
		"default-selector": class($component),
		"default-selector-stored": class($component),
		"host-element": map-get($options, "prefix") + $host-element,
		"host-selector": map-get($options, "prefix") + $host-element,
		"host-selector-stored": map-get($options, "prefix") + $host-element
	);

	// merge default maps
	$_setup: map-merge($_setup, $defaults-updated) !global;

	// set current global component
	$_this: class($component) !global;

	// difine modifiers in mods map
	@include define-modifiers($_mods);
}
